document "offsec_osda_exam_report" {

  meta {
    name = "Offensive Security OSDA Exam Report"

    authors = ["Sergey Polzunov <sergey@blackstork.io>"]

    description = <<-EOT
      The Offensive Security Exam report contains all efforts that were
      conducted in order to pass the Offensive Security certification test.
      This report should contain all items that were used to pass the exam and
      it will be graded from a standpoint of correctness and fullness to all
      aspects of the exam. The purpose of this report is to ensure that the
      student has a full understanding of security detection methodologies as
      well as the technical knowledge to pass the qualifications for the
      Offensive Security Defense Analyst.

      References:
        - https://www.offsec.com/
        - https://www.offsec.com/osda-online/OSDA-Exam-Report.odt
        - https://github.com/noraj/OSCP-Exam-Report-Template-Markdown/blob/master/src/OSDA-exam-report-template_OS_v1.md
    EOT

    url = "https://www.offsec.com/courses/soc-200/"
    version = "2.0"

    license = "MIT License"
    tags = ["pentesting", "offsec", "exam", "osda", "soc-200"]

    updated_at = "2024-04-27T13:06:51+0000"
  }

   vars {

    summary = <<-EOT
      The attacker organization started by performing a brute force against
      an internet accessible RDP server called APPSRV02 and obtained
      administrative access. This led to a complete compromise of the server.
      Next the attacker performed lateral movement to the internal server
      APPSRV02 by reusing stolen credentials from APPSRV02, this also led to
      a complete compromise of APPSRV03.
    EOT

    attack_phases = [
      # Phase 1
      [
        {
          title = "RDP Brute Force",
          text = <<-EOT
            The initial indicator of an attack happening was the triggering of a
            pre-defined threshold rule called "Possible RDP brute force" as shown
            below.

            ![A screenshot of an alert produced by "Possible RDP brute force" rule](./img-placeholder.png)

            By looking at how the rule was defined, it is triggered by more
            than 100 instances of event ID 4625, which is a failed logon. This
            could align with a brute force attack where the attacker makes use
            of a user and/or password list.

            When we inspect some of the events that triggered the alert, as shown below, we
            notice that the server reporting the events is APPSRV02.

            ![A screenshot of the events that triggered the alert](./img-placeholder.png)

            Given that an attacker may have attempted to brute force the
            server, we should search for a subsequent successful log on event
            to APPSRV02 to determine if they obtained access.

            We do this with the following KQL query:

            ```kql
            event.code : "4624" and NOT user.name : SYSTEM and NOT user.name : DWM-2
            ```

            From this query we find the following event entry:

            ![A screenshot of a successful log on entry event](./img-placeholder.png)

            This shows that the user Peter did a successful logon to APPSRV02
            shortly after the suspected brute force attack. The source IP of
            the logon event was 192.168.67.69 which means its not a local
            logon, but remotely.

            At this point we have a strong suspicion that the account with the username
            Peter was compromised and a malicious actor obtained access to APPSRV02 coming
            from the IP address 192.168.67.69. We should escalate this to an incident and
            contact the user to verify whether this was a legitimate logon.
          EOT
        },
        {
          title = "Persistence",
          text = <<-EOT
            After suspicion of a compromise, additional investigation should be
            performed. One area is looking for persistence and a common way
            attackers employ is through the registry.

            To try and determine if this happed, we can use the KQL query:

            ```kql
            process.name : "reg.exe"
            ```

            As a result, we find the following event:

            ![A screenshot of an event found](./img-placeholder.png)

            This shows that a registry change was performed. An entry for the
            Run key was added. The Run registry key is used when a user logs on
            to the computer and thus is often used for persistence.

            In particular we notice that the file `C:\Windows\System32\update.exe`
            will be executed when a user logs on to APPSRV02.

            We should escalate this to investigate what the file update.exe is.
          EOT
        },
        {
          title = "Summary",
          # This can be generated using OpenAI LLM
          text = <<-EOT
            In this phase we have strong suspicions that a malicious actor
            performed a brute force attack against APPSRV02 and managed to
            compromise the user account with the username "Peter".
            Additionally, we suspect that persistence was set up through a Run
            key in the registry to execute the file `C:\Windows\System32\update.exe`.
          EOT
        }
      ],
      # Phase 2
      [
        {
          title = "Placeholder Title",
          text = "Placeholder Text",
        }
      ],
      # Phase 3
      [
        {
          title = "Placeholder Title 2",
          text = "Placeholder Text 2",
        }
      ],
    ]
  }

  title = "Offensive Security OSDA Exam Report"

  content frontmatter {
    content = {
      title = "Offensive Security OSDA Exam Report",
      author = {
        email = "student@youremailaddress.com",
        osid = "XXXXX"
      },
    }
  }

  content toc {
    start_level = 1
    end_level = 4
  }

  section "description" {
    title = "Offensive Security OSDA Exam Report"

    section "intro" {
      title = "Introduction"

      content text {
        value = <<-EOT
          The Offensive Security Exam report contains all efforts that were
          conducted in order to pass the Offensive Security certification test.
          This report should contain all items that were used to pass the exam
          and it will be graded from a standpoint of correctness and fullness to
          all aspects of the exam. The purpose of this report is to ensure that
          the student has a full understanding of security detection
          methodologies as well as the technical knowledge to pass the
          qualifications for the Offensive Security Defense Analyst.
        EOT
      }
    }

    section "objective" {
      title = "Objective"

      content text {
        value = <<-EOT
          The objective of this assessment is to perform detections and
          analysis on the simulated exam network in order to determine which
          attacker actions took place in each of the 10 phases. An example page
          has already been created for you at the latter portions of this
          document that should demonstrate the amount of information and detail
          that is expected in the exam report. Use the sample report as a
          guideline to get you through the reporting.
        EOT
      }
    }

    section "requirements" {
      title = "Requirements"

      content text {
        value = <<-EOT
          The student will be required to fill out this exam report fully and
          to include the following sections:

          1. Overall High-Level Summary of level of compromise
          2. Detailed walkthrough of attacker actions in each phase
          3. Each finding with included screenshots, explanations, event / log entries, and KQL queries if applicable.
        EOT
      }
    }
  }

  section "summary" {
    title = "High-Level Summary"

    content text {
      value = <<-EOT
        This report details and documents the attacks observed against the
        Offensive Security OSDA exam network.

        {{ .vars.summary }}
      EOT
    }
  }

  section "attack_phases" {
    title = "Attack Phases"

    # FIXME: this should be a loop
    section "phase_1" {
      title = "Phase 1"

      vars {
        phase = query_jq(".vars.attack_phases[0]")
      }

      section {
        vars {
          subphase = query_jq(".vars.phase[0]")
        }

        title = "{{ .vars.subphase.title }}"

        content text {
          value = "{{ .vars.subphase.text }}"
        }
      }

      section {
        vars {
          subphase = query_jq(".vars.phase[1]")
        }

        title = "{{ .vars.subphase.title }}"

        content text {
          value = "{{ .vars.subphase.text }}"
        }
      }

      section {
        vars {
          subphase = query_jq(".vars.phase[2]")
        }

        title = "{{ .vars.subphase.title }}"

        content text {
          value = "{{ .vars.subphase.text }}"
        }
      }

    }

    section "phase_2" {
      title = "Phase 2"

      vars {
        phase = query_jq(".vars.attack_phases[1]")
      }

      section {
        vars {
          subphase = query_jq(".vars.phase[0]")
        }

        title = "{{ .vars.subphase.title }}"

        content text {
          value = "{{ .vars.subphase.text }}"
        }
      }
    }

    section "phase_3" {
      title = "Phase 3"

      vars {
        phase = query_jq(".vars.attack_phases[2]")
      }

      section {

        vars {
          subphase = query_jq(".vars.phase[0]")
        }

        title = "{{ .vars.subphase.title }}"

        content text {
          value = "{{ .vars.subphase.text }}"
        }
      }
    }
  }

}
