document "offsec_oswe_exam_report" {

  meta {
    name = "Offensive Security Certified Expert Exam Report"

    author = "Sergey Polzunov <sergey@blackstork.io>"

    description = <<-EOT
      The Offensive Security OSWE exam documentation contains all efforts that
      were conducted in order to pass the Offensive Security Web Expert exam.
      This report will be graded from a standpoint of correctness and fullness
      to all aspects of the exam. The purpose of this report is to ensure that
      the student has the technical knowledge required to pass the
      qualifications for the Offensive Security Web Expert certification.

      References:
        - https://www.offsec.com/courses/web-300/
        - https://www.offsec.com/awae/OSWE-Exam-Report.docx
        - https://github.com/noraj/OSCP-Exam-Report-Template-Markdown/blob/master/src/OSWE-exam-report-template_noraj_v1.md
    EOT

    url = "https://www.offsec.com/courses/web-300/"
    # version = "v.1.0"

    license = "MIT License"
    tags = ["pentesting", "offsec", "oswe", "web-300"]

    updated_at = "2024-04-20T10:46:51+0000"
  }

  data inline "exam_env" {
    hosts_overall_count = 50
    host_ips = ["192.168.X.X", "192.168.X.X", "192.168.X.X"]
  }

  data inline "findings" {
    hosts = [
      {
        host = "192.168.XX.XX",
        app_name = "App Name",
        short_summary_of_exploit_path = "A short summary of the exploit path."
        local_txt = "local-txt-content",
        proof_txt = "proof-txt-content",

        vulnerabilities = [
          {
            name = "Vulnerability 1",
            desc = <<-EOT
              Provide the method and code used to find the vulnerability 1.
            EOT
          },
          {
            name = "Vulnerability 2",
            desc = <<-EOT
              Provide the method and code used to find the vulnerability 2.
            EOT
          },
        ],

        poc_code = <<-EOT
          Provide the final proof of concept code used to gain access to the server.

          ```bash
          echo "Hello"
          ```
        EOT

        steps = <<-EOT
          Provide a detailed account of your methodology in creating the
          exploits. The steps taken should be able to be easily followed and
          reproducible if necessary.
        EOT

        screenshots = ["./img-placeholder.png"]
      }
    ]
  }

  title = "Offensive Security OSWE Exam Documentation"

  content frontmatter {
    content = {
      title = "Offensive Security OSWE Exam Documentation",
      # FIXME: fix is coming in https://github.com/blackstork-io/fabric/pull/155
      #  author = {
      #    email = "student@youremailaddress.com",
      #    osid = "XXXXX"
      #  },
      author = "student@youremailaddress.com",
      version = "v.1.0"
    }
  }

  content toc {
    start_level = 1
  }

  section "intro" {
    title = "Offensive-Security OSWE Exam Documentation"

    content text {
      value = <<-EOT
        The Offensive Security OSWE exam documentation contains all efforts
        that were conducted in order to pass the Offensive Security Web Expert
        exam. This report will be graded from a standpoint of correctness and
        fullness to all aspects of the exam. The purpose of this report is to
        ensure that the student has the technical knowledge required to pass
        the qualifications for the Offensive Security Web Expert certification.

        The student will be required to fill out this exam documentation fully
        and to include the following sections:

        - Methodology walkthrough and detailed outline of steps taken
        - Each finding with included screenshots, walkthrough, sample code, and
          proof.txt if applicable.
        - Any additional items that were not included
      EOT
    }
  }

  section "summary" {
    title = "High-Level Summary"

    content text {
      value = <<-EOT
        I was tasked with performing a white-box penetration test towards
        Offensive Security Exam. A white-box penetration test is sifting
        through the massive amount of data available to identify potential
        points of weakness. The focus of this test is to provide a
        comprehensive assessment of both internal and external vulnerabilities.
        My overall objective was to evaluate the application, identify
        vulnerabilities, and write automated exploit while reporting the
        findings back to Offensive Security.

        When performing the white-box penetration test, there were several
        critical vulnerabilities that were identified on Offensive Security's
        network. When performing the attacks, I was able to gain access to
        multiple machines, primarily due to design flaws and implementation
        errors. During the testing, I had a shell access to multiple systems.
        All systems were successfully exploited and access granted. These
        systems as well as a brief description on how access was obtained are
        listed below:

        {{ range .data.inline.findings.hosts }}
        `{{ .host }}` - {{ .app_name }} - {{ .short_summary_of_exploit_path }}
        {{ end }}

        The penetration testing portions of the assessment focus heavily on
        gaining access to a variety of systems. During this penetration test, I
        was able to successfully gain access to 
        {{ len .data.inline.findings.hosts }} out of the {{ .data.inline.exam_env.hosts_overall_count }}
        systems.
      EOT
    }

    section "recommendations" {
      title = "Recommendations"

      content text {
        value = <<-EOT
          I recommend patching the vulnerabilities identified during the testing
          to ensure that an attacker cannot exploit these systems in the future.
          One thing to remember is that these systems require frequent patching
          and once patched, should remain on a regular patch program to protect
          additional vulnerabilities that are discovered at a later date.
        EOT
      }
    }
  }

  # FIXME: should be a loop with condition checks
  # https://github.com/blackstork-io/fabric/issues/142
  section "host_findings_0" {
    title = "{{ (index .data.inline.findings.hosts 0).host }} - {{ (index .data.inline.findings.hosts 0).app_name }}"

    section "proofs" {
      title = "Local.txt / Proof.txt"

      content text {
        query = ".data.inline.findings.hosts[0]"

        value = <<-EOT
          {{ with .query_result.local_txt }}
          **local.txt**: `{{ . }}`
          {{ end -}}

          {{- with .query_result.proof_txt }}
          **proof.txt**: `{{ . }}`
          {{ end -}}

          {{- if not (or .query_result.local_txt .query_result.proof_txt) }}
          No proofs were obtained.
          {{ end -}}
        EOT
      }
    }

    # FIXME: this should be a loop
    section "vulnerability_1" {
      title = "{{ (index (index .data.inline.findings.hosts 0).vulnerabilities 0).name }}"

      content text {
        value = "{{ (index (index .data.inline.findings.hosts 0).vulnerabilities 0).desc }}"
      }
    }

    section "vulnerability_2" {
      title = "{{ (index (index .data.inline.findings.hosts 0).vulnerabilities 1).name }}"

      content text {
        value = "{{ (index (index .data.inline.findings.hosts 0).vulnerabilities 1).desc }}"
      }
    }

    section "poc_code" {
      title = "PoC Code"

      content text {
        value = "{{ (index .data.inline.findings.hosts 0).poc_code }}"
      }
    }

    section "screenshots" {
      title = "Screenshots"

      content text {
        value = <<-EOT
          Provide screenshots of local.txt and proof.txt contents as stated in
          the Exam Control Panel Objectives.
        EOT
      }

      #FIXME: this should be a loop
      content image {
        src = "{{ (index (index .data.inline.findings.hosts 0).screenshots 0)}}"
      }
    }

    section "steps" {
      title = "Steps"

      content text {
        value = "{{ (index .data.inline.findings.hosts 0).steps }}"
      }
    }
  }

  section {
    base = section.offsec_exam_additional_info
  }
}
