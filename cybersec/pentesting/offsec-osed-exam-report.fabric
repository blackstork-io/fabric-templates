document "offsec_osed_exam_report" {

  meta {
    name = "Offensive Security OSED Exam Report"

    authors = ["Sergey Polzunov <sergey@blackstork.io>"]

    description = <<-EOT
      The Offensive Security OSED exam documentation contains all efforts that
      were conducted in order to pass the Offensive Security Exploit Developer
      exam. This report will be graded from a standpoint of correctness and
      fullness to all aspects of the exam. The purpose of this report is to
      ensure that the student has the technical knowledge required to pass the
      qualifications for the Offensive Security Exploit Developer certification.

      References:
        - https://www.offsec.com/
        - https://www.offsec.com/osed-online/OSED-Exam-Report.docx
        - https://github.com/noraj/OSCP-Exam-Report-Template-Markdown/blob/master/src/OSED-exam-report-template_epi_v1.md
    EOT

    url = "https://www.offsec.com/courses/exp-301/"
    version = "2.0"

    license = "MIT License"
    tags = ["pentesting", "offsec", "exam", "osed", "exp-301"]

    updated_at = "2024-04-27T13:06:51+0000"
  }

  title = "Offensive Security OSED Exam Documentation"

  content frontmatter {
    content = {
      title = "Offensive Security OSED Exam Documentation",
      author = {
        email = "student@youremailaddress.com",
        osid = "XXXXX"
      },
    }
  }

  content toc {
    start_level = 1
    end_level = 4
  }

  section "description" {
    title = "Offensive Security OSED Exam Documentation"

    content text {
      value = <<-EOT
        The Offensive Security OSED exam documentation contains all efforts
        that were conducted in order to pass the Offensive Security Exploit
        Developer exam. This report will be graded from a standpoint of
        correctness and fullness to all aspects of the exam. The purpose of
        this report is to ensure that the student has the technical knowledge
        required to pass the qualifications for the Offensive Security Exploit
        Developer certification.
      EOT
    }

    section "objective" {
      title = "Objective"

      content text {
        value = <<-EOT
          The objective of this exam is to solve three given assignments as
          described in the control panel. The student is tasked with following
          a methodical approach in analyzing and solving the assignments. The
          exam report is meant to be a writeup of the steps taken to solve the
          assignment, including any analysis performed and code written.

          An example page has already been created for you at the latter
          portions of this document that should give you ample information on
          what is expected to pass this exam. Use the sample report as a
          guideline to get you through the reporting, while removing any
          headlines that are not relevant to a specific assignment.
        EOT
      }
    }

    section "requirements" {
      title = "Requirements"

      content text {
        value = <<-EOT
            The student will be required to fill out this exam documentation
            fully and to include the following sections:

            - High-Level summary of assignment solutions.
            - Methodology walkthrough and detailed outline of steps taken through analysis and all written code.
            - Each finding with included screenshots, walkthrough, sample code or reference.
            - Screenshots of proof.txt
        EOT
      }
    }
  }

  section "summary" {
    title = "High-Level Summary"

    content text {
      value = <<-EOT
        A brief description of the assignments that were solved, including the
        overall exploitation steps.
      EOT
    }
  }

  # FIXME: this should be a loop
  section "assignment_1" {
    title = "Assignment X"

    section "proof" {
      title = "Proof.txt"

      content text {
        value = "Provide the contents of proof.txt"
      }
    }

    section "initial_analysis" {
      title = "Initial Analysis"

      content text {
        value = <<-EOT
          Provide relevant techniques and methods used to perform enumeration of
          the application, including network ports, security mitigations etc. The
          steps taken should be reproducible and easy to understand. Include any
          custom code or references to public tools
        EOT
      }
    }

    section "application_analysis" {
      title = "Application Analysis"

      content text {
        value = <<-EOT
          Provide a description of the analysis performed against the
          application, this includes both dynamic and static analysis.

          The analysis should include any reverse engineering performed to
          understand network protocols or file formats as well as how the
          application may be triggered to dispatch available commands.
        EOT
      }
    }

    section "vulnerability_discovery" {
      title = "Vulnerability Discovery"

      content text {
        value = <<-EOT
          Provide relevant analysis steps to locate vulnerabilities inside the
          application, this includes both results from static analysis and
          dynamic analysis.

          As part of the documentation, proof of concept Python3 code must be created
          and explained that triggers the vulnerabilities. This includes both ASLR
          bypass and memory corruption vulnerabilities.

          Only the steps that ended up working are required.
        EOT
      }
    }

    section "exploit_creation" {
      title = "Exploit Creation"

      content text {
        value = <<-EOT
          Provide a description of steps to create the exploit, this includes how
          to combine vulnerabilities, how to bypass DEP and how to write any
          custom shellcode. At the end of this section the full exploit code
          should be developed while an explanation of each step should be performed.
        EOT
      }
    }

    section "screenshots" {
      title = "Screenshots"

      content text {
        value = <<-EOT
          The exam control panel contains a section available to submit your
          proof files. The contents of the proof.txt files obtained from your
          exam machines must be submitted in the control panel before your exam
          has ended. Note that the control panel will not indicate whether the
          submitted proof is correct or not. 

          Each proof.txt found must be shown in a screenshot that includes the contents
          of the file, as well as the IP address of the target by using ipconfig.
        EOT
      }

      content image {
        alt = "A screenshot with proof.txt contents and IP address of the target"
        src = "./img-placeholder.png"
      }
    }
  }
}
