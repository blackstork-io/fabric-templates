document "offsec_osmr_exam_report" {

  meta {
    name = "Offensive Security macOS Researcher Exam Report"

    author = "Sergey Polzunov <sergey@blackstork.io>"

    description = <<-EOT
      The Offensive Security OSMR exam documentation contains all efforts that
      were conducted in order to pass the Offensive Security macOS Researcher
      exam. This report will be graded from a standpoint of correctness and
      fullness to all aspects of the exam. The purpose of this report is to
      ensure that the student has the technical knowledge required to pass the
      qualifications for the Offensive Security macOS Researcher certification.

      References:
        - https://www.offsec.com/
        - https://www.offsec.com/courses/exp-312/
        - https://www.offsec.com/osmr-online/OSMR-Exam-Report.docx
        - https://github.com/noraj/OSCP-Exam-Report-Template-Markdown/blob/master/src/OSMR-exam-report-template_OS_v1.md
        - https://github.com/omr00t/OSMR_md_reporter
    EOT

    url = "https://www.offsec.com/courses/exp-312/"
    # version = "v.2.0"

    license = "MIT License"
    tags = ["pentesting", "offsec", "exam", "osmr", "exp-312"]

    updated_at = "2024-04-27T13:06:51+0000"
  }

  data inline "findings" {
    assignments = [
      {
        host = "192.168.X.1",
        local_txt = "local-txt-content",
        proof_txt = "proof-txt-content",
        secret_txt = "secret-txt-content",
        # FIXME: use OpenAI for summary of the steps
        exploitation_steps_summary =<<-EOT
          Exploitation steps summary for the assignment.
        EOT
        initial_analysis = <<-EOT
          Provide relevant techniques and methods used to perform enumeration and
          discovery of the application and/or the environment. The steps taken
          should be reproducible and easy to understand. Include any custom code
          or references to public tools.

          ```bash
          #!/usr/bin/env bash

          ...
          ```

        EOT
        vulnerability_discovery = <<-EOT
          Provide relevant analysis steps to locate vulnerability inside the
          application or environment, this includes results from static analysis
          and/or dynamic analysis. Explain the vulnerability identified.

          Only the steps that ended up working are required.
        EOT
        exploit_bypass_creation = <<-EOT
          Provide a description of steps to create the exploit or security
          control bypass. At the end of this section the full exploit (or bypass)
          code should be developed while an explanation of each step should be
          performed.
        EOT
        screenshots = [
          "../../img-placeholder.png",
        ]
        attached_files = [
          "assignment1.c",
        ]
      }
    ]
  }


  title = "OSMR Exam Documentation"

  content frontmatter {
    content = {
      title = "Offensive Security OSMR Exam Documentation",
      # FIXME: fix is coming in https://github.com/blackstork-io/fabric/pull/155
      #  author = {
      #    email = "student@youremailaddress.com",
      #    osid = "XXXXX"
      #  },
      author = "student@youremailaddress.com",
      version = "v.1.0"
    }
  }

  content toc {
    start_level = 1
    end_level = 4
  }

  section "description" {
    title = "Offensive Security OSMR Exam Documentation"

    content text {
      value = <<-EOT
        The Offensive Security OSMR exam documentation contains all efforts that
        were conducted in order to pass the Offensive Security macOS Researcher
        exam. This report will be graded from a standpoint of correctness and
        fullness to all aspects of the exam. The purpose of this report is to
        ensure that the student has the technical knowledge required to pass the
        qualifications for the Offensive Security macOS Researcher certification.
      EOT
    }

    section "objective" {
      title = "Objective"

      content text {
        value = <<-EOT
          The objective of this exam is to solve four given assignments as
          described in the control panel. The student is tasked with following a
          methodical approach in analyzing and solving the assignments. The exam
          report is meant to be a writeup of the steps taken to solve the
          assignment, including any analysis performed and code written.

          An example page has already been created for you at the latter portions of this
          document that should give you sample information on what is expected to pass
          this exam. Use the sample report as a guideline to get you through the
          reporting, while removing any headlines that are not relevant to a specific
          assignment.
        EOT
      }
    }

    section "requirements" {
      title = "Requirements"

      content text {
        value = <<-EOT
          The student will be required to fill out this exam documentation
          fully and to include the following sections:

          - High-Level summary of assignment solutions.
          - Methodology walkthrough and detailed outline of steps taken through analysis and all written code.
          - Each finding with included screenshots, walkthrough, sample code or reference.
          - Screenshots of proofs.
        EOT
      }
    }
  }

  section "summary" {
    title = "High-Level Summary"

    content text {
      value = <<-EOT
        A brief description of the assignments that were solved, including the overall exploitation steps.

        {{ range $index, $a := .data.inline.findings.assignments }}
        *Assignment {{ add $index 1 }}:*
        {{ $a.exploitation_steps_summary }}
        {{ end }}

      EOT
    }
  }

  # FIXME: this should be a loop
  section "assignment_1" {
    title = "Assignment 1"

    section "proofs" {
      title = "Local.txt / Proof.txt / Secret.txt"

      content text {

        query = ".data.inline.findings.assignments[0]"

        value = <<-EOT
          {{ with .query_result.local_txt }}
          **local.txt**: `{{ . }}`
          {{ end -}}

          {{- with .query_result.proof_txt }}
          **proof.txt**: `{{ . }}`
          {{ end -}}

          {{- with .query_result.secret_txt }}
          **secret.txt**: `{{ . }}`
          {{ end -}}

          {{- if not (or .query_result.local_txt .query_result.proof_txt .query_result.secret_txt) }}
          No proofs were obtained.
          {{ end -}}
        EOT
      }
    }

    section "initial_analysis" {
      title = "Initial Analysis"

      content text {
        value = "{{ (index .data.inline.findings.assignments 0).initial_analysis }}"
      }
    }

    section "vulnerability_discovery" {
      title = "Vulnerability Discovery"

      content text {
        value = "{{ (index .data.inline.findings.assignments 0).vulnerability_discovery }}"
      }
    }

    section "exploit_bypass_creation" {
      title = "Exploit / Bypass Creation"

      content text {
        value = "{{ (index .data.inline.findings.assignments 0).exploit_bypass_creation }}"
      }
    }

    section "screenshots" {
      title = "Screenshots"

      content text {
        value = <<-EOT
          The exam control panel contains a section available to submit your proof
          files. The contents of the local.txt, proof.txt or secret.txt files
          obtained from your exam machines must be submitted in the control panel
          before your exam has ended. Note that the control panel will not indicate
          whether the submitted proof is correct or not. 

          Each local.txt, proof.txt or secret.txt found must be shown in a screenshot
          that includes the contents of the file, as well as the IP address of the target
          by using ipconfig.
        EOT
      }

      #FIXME: this should be a loop
      content image {
        src = "{{ (index (index .data.inline.findings.assignments 0).screenshots 0)}}"
      }
    }

  }
}
